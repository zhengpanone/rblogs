==================
常见的Trait和用法
==================

转换
===============

From<T>
---------------

👉 把一种类型 无损 转换成另一种类型。
📌 例子： ``let s: String = String::from("hello");``

Into<T>
---------------

👉 From 的反向实现。只要实现了 From<A> for B，就自动实现 Into<B> for A。
📌 常用在泛型函数里： ``fn foo<T: Into<String>>(s: T)``。

TryFrom<T> / TryInto<T>
-----------------------------

👉 带错误处理的转换（可能失败）。
📌 例子： ``let n: u8 = u8::try_from(300).unwrap_err()``;

FromStr
---------------

👉 从字符串解析出某个类型。
📌 例子： ``let ip: IpAddr = "127.0.0.1".parse().unwrap()``;

运算符重载
===============

Add, Sub, Mul, Div, Rem
---------------------------------

👉 定义 + - * / % 运算。
📌 例子：impl Add for Point { … } 可以自定义点的加法。

Neg
---------------------

👉 定义一元负号 -x。

Index, IndexMut
-----------------------------

👉 实现 [] 下标操作。
📌 例子：vec[0] 背后就是调用了 Index。

Deref, DerefMut
-----------------------------

👉 智能指针解引用。
📌 Box<T>、Rc<T> 等就是通过实现 Deref 来模拟指针的。

格式化
===============

Display
-----------------------------

👉 人类可读的格式化，用 {}。
📌 例子：println!("{}", my_struct);

Debug
-----------------------------

👉 调试格式化，用 {:?}。
📌 几乎所有类型都会 #[derive(Debug)]。

Write / Read（来自 std::io）
----------------------------------

👉 IO 写入/读取接口。
📌 文件、网络流都实现了这些 trait。

集合
===============

Iterator
------------------------

👉 所有迭代器的核心 trait，提供 .next()。
📌 for 循环、map、filter 都基于它。

IntoIterator
------------------------

👉 用于 for x in collection。
📌 Vec<T> 同时实现了按值、按引用、按可变引用的 IntoIterator。

Extend
-------------------------

👉 往集合里追加元素。
📌 例子：vec.extend(&[1,2,3]);

FromIterator
--------------------------

👉 把迭代器转成集合。
📌 例子：let v: Vec<i32> = (0..5).collect();

并发 & 生命周期
=======================

Send
----------------------

👉 类型能否安全地跨线程转移所有权。
📌 大多数类型都是 Send，除了 Rc<T>。

Sync
----------------------------------

👉 类型能否安全地跨线程共享引用。
📌 Arc<T> 是 Sync，Rc<T> 不是。

Drop
----------------------------------

👉 自定义资源释放逻辑，类似 C++ 的析构函数。
📌 File、MutexGuard 都用它来自动清理资源。

Clone
----------------------------------

👉 显式复制一个值。
📌 和 Copy 不同，Clone 可以做深拷贝。

Copy
----------------------------------

👉 位拷贝（轻量类型）。
📌 数字、布尔、引用是 Copy，String、Vec 不是。

比较 & 默认
=====================

PartialEq / Eq
------------------------

👉 定义 ==、!=。
📌 Eq 代表完全等价，PartialEq 允许“部分等价”（比如浮点数 NaN）。

PartialOrd / Ord
-----------------------

👉 定义排序比较 < > <= >=。
📌 PartialOrd 允许不可比（NaN），Ord 代表全序。

Hash
------------------------

👉 定义哈希值，用于 HashMap、HashSet。

Default
-----------------------

👉 提供一个默认值。
📌 例子：let v: Vec<i32> = Default::default();